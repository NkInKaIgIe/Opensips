#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

# / uncomment the following lines to enable debugging /
#debug_mode=yes

log_level=3
xlog_level=3
log_stderror=no
log_facility=LOG_LOCAL0

udp_workers=4

# /* uncomment the next line to enable the auto temporary blacklisting of 
#    not available destinations (default disabled) */
#disable_dns_blacklist=no

# /* uncomment the next line to enable IPv6 lookup after IPv4 dns 
#    lookup failures (default disabled) */
#dns_try_ipv6=yes

socket=udp:172.29.5.211:5060   # CUSTOMIZE ME
#socket=tcp:172.29.5.189:5060   # CUSTOMIZE ME


####### Modules Section ########

#set module path
mpath="/usr/lib64/opensips/modules"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

######

#### Transaction Module
loadmodule "tm.so"
modparam("tm","fr_timeout", 5)
modparam("tm","fr_inv_timeout", 30)
modparam("tm","restart_fr_on_each_reply", 0)
modparam("tm","onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
# / do not append from tag to the RR (no need for this script) /
modparam("rr", "append_fromtag", 1)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### MYSQL module
loadmodule "db_mysql.so"

#### HTTPD module
loadmodule "httpd.so"
modparam("httpd", "port", 8888)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
# / uncomment the next line not to allow more than 10 contacts per AOR /
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
# / what special events should be accounted ? /
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
# /* by default we do not adjust the direct of the sequential requests.
#    if you enable this parameter, be sure to enable "append_fromtag"
#    in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

loadmodule "aaa_radius.so"
# loadmodule "auth_aaa.so"
#### UAC_AUTH
loadmodule "uac_auth.so"
modparam("uac_auth","auth_username_avp","$avp(user)")
modparam("uac_auth","auth_password_avp","$avp(pass)")
modparam("uac_auth","auth_realm_avp","$avp(realm)")
modparam("uac_auth","credential","8888:103.113.81.18:522ffdb9f46b33db71c3160a51a21411")

loadmodule "uac_redirect.so"
loadmodule "uac_registrant.so"
modparam("uac_registrant", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME
modparam("uac_registrant", "timer_interval", 120)
modparam("uac_registrant", "hash_size", 2)

loadmodule "uac.so"
# modparam("uac_auth","credential","8888:172.29.5.189:522ffdb9f46b33db71c3160a51a21411")
#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME

#### DOMAIN module
loadmodule "domain.so"
modparam("domain", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME
modparam("domain", "db_mode", 1)   # Use caching
modparam("auth_db|usrloc", "use_domain", 1)

#### PRESENCE modules
loadmodule "xcap.so"
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("xcap|presence", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME
modparam("presence_xml", "force_active", 1)
modparam("presence", "fallback2db", 0)

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME

####  DIALPLAN module
loadmodule "dialplan.so"
modparam("dialplan", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME

####  DYNAMMIC ROUTING module
loadmodule "drouting.so"
modparam("drouting", "db_url",
	"mysql://root:Root#123@localhost/opensips") # CUSTOMIZE ME

####  MI_HTTP module
loadmodule "mi_http.so"

loadmodule "proto_udp.so"
loadmodule "proto_tcp.so" 
####### Routing Logic ########

####dispatcher.so#
loadmodule "dispatcher.so"
modparam("dispatcher", "db_url", 
	"mysql://root:Root#123@localhost/opensips")

# main request routing logic
route{
	$avp(user):="8888";
	$avp(pass):="522ffdb9f46b33db71c3160a51a21411";
	$avp(realm):="asterisk";

	if (has_totag()) {
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			xlog("ack line 195");
			xlog("$Ri");
			t_relay();
			exit;
		}
		xlog("line 201");
		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			if (is_method("SUBSCRIBE") && is_myself("$rd")) {
				xlog("line 204");
				# in-dialog subscribe requests
				route(handle_presence);

				 if (is_method("ACK") && isflagset("AUTH_DONE")) {
					# Process ACK's
					if ($cs == $avp(original_cseq)) {
						route(INCREASE_CSEQ);
					}
					xlog("helloooooooooooooooooo line 215");
  			  }

				exit;
			}
			xlog("line 211");
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			xlog("line 225");
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}
		xlog("line 230");
		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}
	# CANCEL processing
	if (is_method("CANCEL")) {
		xlog("hello line 227");
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();
	if ( !(is_method("REGISTER")  || is_from_gw() ) ) {
		xlog("xác thực local line 233");
		if (is_from_local()) {	
			xlog(" xác thực local line 235");
			xlog("$au\n $fU");

			# $au = 8888;
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				xlog("xác thực local line 243");
				xlog("$au\n");
				proxy_challenge("", "auth");
				xlog("$au\n");
				exit;
			}
				
			if ($au!=$fU) {
				send_reply(403,"Forbidden auth ID");
				exit;
			}

			xlog("xác thực local hello line 255");
			consume_credentials();
			xlog(" xác thực local line 257");
			# caller authenticated
			
		} else {

			# if caller is not local, then called number must be local
			
			if (!is_uri_host_local()) {
				xlog("for2");
				send_reply(403,"Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE")){
		xlog("xác thực thành công local line 283");
		record_route();

	}
	# account only INVITEs
	if (is_method("INVITE")) {
		xlog("INVITE 1 line 292");
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply(500,"Internal Server Error");
			exit;
		}
		
		do_accounting("db");
		xlog("line 300 exit invite line 192");
	}

	
	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n"); 
		xlog("hello line 308");
		route(relay);
	}

	# requests for my domain
	
	if( is_method("PUBLISH|SUBSCRIBE")){
		xlog("hello line 316");
			route(handle_presence);
	}

	if (is_method("REGISTER")) {
		xlog("line 318");
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "auth");
			exit;
		}
		
		if ($au!=$tU) {
			send_reply(403,"Forbidden auth ID");
			exit;
		}
		if ($socket_in(proto) == "tcp")
			setflag("TCP_PERSISTENT");
		
		# store the registration and generate a SIP reply
		if (!save("location"))
			xlog("failed to register AoR $tu\n");
		
		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	
	# apply DB based aliases
	alias_db_lookup("dbaliases");

	
	# apply transformations from dialplan table
	dp_translate( 0, "$rU", $rU);

	
	if ($rU=~"0" && $rU=~"[0-9]{9}") {
		xlog("xác nhận số điện thoại gọi từ user $fU");
		xlog("đây là $tU");
		xlog("đây là $rd");

		if (!do_routing(0)) {
            xlog("do 0");
			send_reply(500,"No PSTN Route found");
			exit;
		}
		else{
			xlog("line 360");
			$var(username)="8888";
			$var(password)="522ffdb9f46b33db71c3160a51a21411";
			# if (!proxy_authorize("asterisk","")) {
			# 	xlog("line 363");
			# 	proxy_challenge("asterisk","auth");
			# 	xlog("line 365");

			# 	route(relay);
			# 	exit;
			# };

		}
		route(relay);
		xlog("dưới route relay nhận số điện thoại ne`");
		exit;		
	
	}



	# do lookup with method filtering
	if (!lookup("location","m")) {
		xlog("line 381");
		if (!db_does_uri_exist("$ru","subscriber")) {
			send_reply(420,"Bad Extension");
			exit;
		}
		
		# redirect to a different VM system
		$du = "sip:103.113.81.18:5060"; # CUSTOMIZE ME
		route(relay);
		
	} 

	

	# when routing via usrloc, log the missed calls also
	do_accounting("db","missed");
	xlog("line 397");
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		xlog("Nhận invite 2 gọi đến sdt $rU");
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		# $fU = "8888";
		# if($var(sdt)!=$au){
		# 	xlog("line 420");
		# 	$var(sdt)=$au;
		# };

		
	}
	
		t_on_failure("missed_call");

	if (!t_relay()) {

		send_reply(500,"Internal Error");
	}

	exit;

}


# Presence route
route[handle_presence]{
	xlog("line 429");
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if(is_method("PUBLISH")) {
		handle_publish();
	} else
	if( is_method("SUBSCRIBE")) {
		handle_subscribe();
	}

	exit;
}


branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	xlog("incoming reply\n");
}

failure_route[missed_call] {
	if(t_check_status("401")){
		setflag("AUTH_DONE");
	}
	$var(authenaa) = uac_auth();
	xlog("authenation ne` $var(authenaa)");
	if(t_check_status("403")){
		xlog("đây là lỗi 403");
	}
	xlog("vao missed__call");
	if (t_was_cancelled()) {
		xlog("line 482");
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}

	
	# redirect the failed to a different VM system
	if (t_check_status("486|408")) {
		xlog("line 473");
		$du = "sip:103.113.81.18:5060"; # CUSTOMIZE ME
		# do not set the missed call flag again
		route(relay);
	}
}

route[INCREASE_CSEQ] {
	xlog("asdasdasdasdasdasd");
}

local_route {
	xlog("hello line 483");
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}
